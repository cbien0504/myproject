version: '3'
x-airflow-common:
  &airflow-common
  image: airflow_with_jdk
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW_HOME : '/app/airflow'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # HADOOP_HOME: /opt/hadoop-3.2.1
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/airflow:/app/airflow
    - ${AIRFLOW_PROJ_DIR:-.}/crawler:/app/crawler
    - ${AIRFLOW_PROJ_DIR:-.}/spark_processing:/app/spark_processing
    - ${AIRFLOW_PROJ_DIR:-.}/data:/app/data
    - ${AIRFLOW_PROJ_DIR:-.}/dependencies/jars:/app/dependencies/jars
  user: root

  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy


services:

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - my_network

  redis:
    image: redis:latest
    container_name: redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - my_network

  airflow-webserver:
    <<: *airflow-common
    container_name: webserver
    command: webserver
    ports:
      - "8000:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - my_network

  airflow-scheduler:
    <<: *airflow-common
    container_name: scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - my_network

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    container_name: worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - my_network

  airflow-init:
    << : *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init && \
        airflow users create \
          --role Admin \
          --username airflow \
          --password airflow \
          --email airflow@airflow.com \
          --firstname airflow \
          --lastname airflow
    restart: on-failure
    networks:
      - my_network

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - my_network

  # spark-master:
  #   image: bde2020/spark-master:3.3.0-hadoop3.3
  #   container_name: spark-master
  #   ports:
  #     - "8080:8080"
  #     - "7077:7077"
  #   environment:
  #     - INIT_DAEMON_STEP=setup_spark
  #     - HADOOP_HOME=/opt/hadoop-3.2.1
  #   volumes:
      # - ./spark_streaming.py:/spark_streaming.py
      # - ./batch_processing.py:/batch_processing.py
    #   - shared_volumes:/opt/hadoop-3.2.1
    # networks:
    #   - my_network
    # depends_on:
      # - namenode

  # spark-worker:
  #   image: bde2020/spark-worker:3.3.0-hadoop3.3
  #   container_name: spark-worker
  #   volumes:
  #     # - ./spark_streaming.py:/spark_streaming.py
  #     # - ./batch_processing.py:/batch_processing.py
  #     - shared_volumes:/opt/hadoop-3.2.1
  #   depends_on:
  #     - spark-master
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     - "SPARK_MASTER=spark://spark-master:7077"
  #     - HADOOP_HOME=/opt/hadoop-3.2.1
  #   networks:
  #     - my_network

  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=bien
      - MINIO_ROOT_PASSWORD=05042003
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    restart: always
    networks:
      - my_network

volumes:
  minio-data:
  postgres-db-volume:
networks:
  my_network: